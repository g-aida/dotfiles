[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
# アイコンを各種プラグインに適用する
repo = 'ryanoasis/vim-devicons'
hook_add = '''
" NERDTree
" フォルダ名の先頭にアイコンを付加する
let g:WebDevIconsUnicodeDecorateFolderNodes = 1
" フォルダの開閉によってアイコンを切り替える
let g:DevIconsEnableFoldersOpenClose = 1
'''

[[plugins]]
repo = 'Shougo/defx.nvim'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = 'let g:deoplete#enable_at_startup = 1'

[[plugins]]
# 検索・置換コマンドを賢くする
repo = 'tpope/vim-abolish'

[[plugins]]
# True Color対応のカラースキーム
repo = 'jacoborus/tender.vim'
hook_add = '''
if (has("termguicolors"))
	set termguicolors
endif
syntax enable
colorscheme tender
'''

[[plugins]]
# Emmet記法で爆速開発
repo = 'mattn/emmet-vim'
hook_add = '''
let g:user_emmet_install_global = 0
autocmd FileType html,css EmmetInstall
'''

[[plugins]]
# カレントディレクトリのファイル一覧を表示
repo = 'scrooloose/nerdtree'
hook_add = '''
" <C-e>でツリーを開く
nnoremap <silent><C-e> :<C-u>NERDTreeToggle<CR>

" ブックマークを初期表示
let g:NERDTreeShowBookmarks=1

" 隠しファイルを表示する
let NERDTreeShowHidden = 1

" Vimを起動したときに自動でNERDTreeを表示
" autocmd vimenter * NERDTree

" ファイル名が指定された状態でVimが起動された場合はNERDTreeを起動しない
" autocmd StdinReadPre * let s:std_in=1
" autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
" autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif

" 他のバッファをすべて閉じたときにNERDTreeが開いていたらNERDTreeも一緒に閉じる
autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" ディレクトリ表示記号を変更する
let g:NERDTreeDirArrows = 1
let g:NERDTreeDirArrowExpandable  = '▶'
let g:NERDTreeDirArrowCollapsible = '▼'

'''

[[plugins]]
# NERDTreeのシンタックスハイライト
repo = 'tiagofumo/vim-nerdtree-syntax-highlight'
hook_add = '''
" アイコンだけでなくファイル名もハイライトする
let g:NERDTreeFileExtensionHighlightFullName = 1
let g:NERDTreeExactMatchHighlightFullName = 1
let g:NERDTreePatternMatchHighlightFullName = 1

" フォルダをハイライトする
let g:NERDTreeHighlightFolders = 1
let g:NERDTreeHighlightFoldersFullName = 1

" ファイルアイコン
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols = {}
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['html'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['css'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['md'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['vim'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols = {}
let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols['.gitignore'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols['.gitconfig'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols['.vimrc'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols['.gvimrc'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols['_vimrc'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols['_gvimrc'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols = {}
let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['.*vimrc.*'] = ''
'''

[[plugins]]
# 複数行コメントアウト
repo = 'tomtom/tcomment_vim'

[[plugins]]
# surround関連の編集
repo =  'tpope/vim-surround'

[[plugins]]
# ヴィジュアルモードで選択した文字列を検索
repo = 'thinca/vim-visualstar'

[[plugins]]
# インデントガイド
repo = 'nathanaelkane/vim-indent-guides'

[[plugins]]
# 複数カーソル
repo = 'terryma/vim-multiple-cursors'

[[plugins]]
# ステータスラインをいい感じにする
repo = 'itchyny/lightline.vim'
depends = [
	'jacoborus/tender.vim',
]
hook_add = '''
let g:lightline = {
	\ 'colorscheme': 'tender',
	\ 'mode_map': {'c': 'NORMAL'},
	\ 'active': {
	\	'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ] ]
	\ },
	\ 'component_function': {
	\	'modified':	    'LightlineModified',
	\	'readonly':     'LightlineReadonly',
	\	'fugitive':     'LightlineFugitive',
	\	'filename':     'LightlineFilename',
	\	'fileformat':   'LightlineFileformat',
	\	'filetype':     'LightlineFiletype',
	\	'fileencoding': 'LightlineFileencoding',
	\	'mode':         'LightlineMode'
	\	}
	\ }

function! LightlineModified()
	return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! LightlineReadonly()
	return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? 'x' : ''
endfunction

function! LightlineFilename()
	return ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
		\ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
		\  &ft == 'unite' ? unite#get_status_string() :
		\  &ft == 'vimshell' ? vimshell#get_status_string() :
		\ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
		\ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
endfunction

function! LightlineFugitive()
	if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
		return fugitive#head()
	else
		return ''
	endif
endfunction

function! LightlineFileformat()
	return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! LightlineFiletype()
	return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
endfunction

function! LightlineFileencoding()
	return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
endfunction

function! LightlineMode()
	return winwidth(0) > 60 ? lightline#mode() : ''
endfunction
'''

# [[plugins]]
# ステータスラインをかっこよく
# repo = 'vim-airline/vim-airline'

[[plugins]]
# ソースコード中のカラーをプレビューする
repo = 'ap/vim-css-color'

[[plugins]]
# 行末の不要な空白文字を可視化
repo = 'bronson/vim-trailing-whitespace'

[[plugins]]
# .tomlファイルのシンタックス
repo = 'cespare/vim-toml'

[[plugins]]
# ファイルをあいまい検索
repo = 'kien/ctrlp.vim'

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
on_if = '!has("nvim")'

[[plugins]]
repo = 'roxma/nvim-yarp'
on_if = '!has("nvim")'

[[plugins]]
# APIドキュメントを参照する
repo = 'thinca/vim-ref'

[[plugins]]
# Vimチートシートを別ペインで表示する
repo = 'reireias/vim-cheatsheet'
hook_add = '''
let g:cheatsheet#cheat_file = '$HOME/.vim_cheatsheet.md'
'''

# [[plugins]]
# モード変更時にIME状態を自動で切り替える
# repo = 'pepo-le/win-ime-con.nvim'
# on_event = 'VimEnter'
# hook_source = '''
# g:win_ime_con_mode = 0
# '''

[[plugins]]
# ランダムな時刻をINSERTする
repo = 'kebiishi/random-date'

[[plugins]]
# ディレクトリごとに設定ファイルを用意する
repo =  'thinca/vim-localrc'
