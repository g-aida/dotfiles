[[plugins]]
repo = 'Shougo/dein.vim'

# アイコンを各種プラグインに適用する
[[plugins]]
repo = 'ryanoasis/vim-devicons'
hook_add = '''
" NERDTreeの設定
" フォルダ名の先頭にアイコンを付加する
let g:WebDevIconsUnicodeDecorateFolderNodes = 1
" フォルダの開閉によってアイコンを切り替える
let g:DevIconsEnableFoldersOpenClose = 1
'''
[[plugins]]
repo = 'prabirshrestha/async.vim'

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add='''
" Diagnostics
" 有効/無効の切り替え
let g:lsp_diagnostics_enabled = 1
" Sign表示有効/無効の切り替え
let g:lsp_signs_enabled = 1
let g:lsp_signs_error = {'text': ''}
let g:lsp_signs_warning = {'text': ''}
let g:lsp_signs_information= {'text': ''}
let g:lsp_signs_hint= {'text': ''}
" カーソル下のエラー内容を表示する。
let g:lsp_diagnostics_echo_cursor = 1
" let g:lsp_diagnostics_echo_delay = 3000
" let g:lsp_diagnostics_float_cursor = 1

" メソッドの用法を表示する。
let g:lsp_signature_help_enabled = 1

" カーソル下の変数・メソッド名などをハイライトする。
let g:lsp_highlight_references_enabled = 1

" debug
"let g:lsp_log_verbose = 1
"let g:lsp_log_file = expand('~/vimfiles/tmp/vim-lsp_log/vim-lsp.log')
'''

[[plugins]]
repo = 'mattn/vim-lsp-settings'
hook_add = '''
let g:lsp_settings_servers_dir = '~/vimfiles/lsp-searvers'
let g:lsp_settings = {
 \ 'solargraph': {
 \   'disabled': 0,
 \   'blocklist': ['', 'ruby'],
 \  },
 \}
'''

[[plugins]]
# 非同期補完
repo = 'prabirshrestha/asyncomplete.vim'
hook_add = '''
"let g:asyncomplete_log_file = expand('~/vimfiles/tmp/asyncomplete_log/asyncomplete.log')

" Force refresh completion
imap <c-space> <Plug>(asyncomplete_force_refresh)

" 補完時のプレビューウィンドウ表示
set completeopt+=preview

" 対象ファイルタイプを限定する
" let g:asyncomplete_enable_for_all = 0
" autocmd vimrc FileType autohotkey,autoit,cfg,git,go,groovy,java,javascript,python,snippet,toml,vim,vb,xsl call asyncomplete#enable_for_buffer()
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'
depends = [
	'prabirshrestha/asyncomplete.vim',
	'prabirshrestha/vim-lsp'
]

# スニペット
[[plugins]]
repo = 'Shougo/neosnippet.vim'

# 標準スニペットライブラリ
[[plugins]]
repo = 'Shougo/neosnippet-snippets'
depends = 'Shougo/neosnippet.vim'

[[plugins]]
repo = 'prabirshrestha/asyncomplete-neosnippet.vim'
hook_add = '''
call asyncomplete#register_source(asyncomplete#sources#neosnippet#get_source_options({
    \ 'name': 'neosnippet',
    \ 'whitelist': ['*'],
    \ 'completor': function('asyncomplete#sources#neosnippet#completor'),
    \ }))
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)
'''
# [[plugins]]
# repo = 'thomasfaingnaert/vim-lsp-snippets'
#
# [[plugins]]
# repo = 'thomasfaingnaert/vim-lsp-neosnippet'

# 非同期コードチェック
[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
" linterを指定
" let g:ale_linters = {
" 	\	'java' : [],
" 	\	'javascript' : [],
" 	\ }
"
" ワーニング・エラー間を素早くジャンプ
nmap <silent> [e <Plug>(ale_previous_wrap)
nmap <silent> ]e <Plug>(ale_next_wrap)

let g:ale_fixers = {
	\   'ruby': ['rubocop'],
	\}

" 左端のシンボルカラムを表示したままにする
let g:ale_sign_column_always = 1
" シンボルを変更する
let g:ale_sign_error   = ''
let g:ale_sign_warning = ''
'''

# # javascriptのインデント・シンタックスハイライト
# [[plugins]]
# repo = 'pangloss/vim-javascript'
# hook_add = '''
# " Enables syntax highlighting for JSDocs.
# let g:javascript_plugin_jsdoc = 0
# " Enables some additional syntax highlighting for NGDocs. Requires JSDoc plugin to be enabled as well.
# let g:javascript_plugin_ngdoc = 0
# " Enables syntax highlighting for Flow.
# let g:javascript_plugin_flow = 0
# " JSファイルを自動的に折りたたむ
# " augroup javascript_folding
# "     au!
# "     au FileType javascript setlocal foldmethod=syntax
# " augroup END
# '''

# # JavaScript のシンタックス
# [[plugins]]
# repo = 'othree/yajs.vim'

# # JavaScript ライブラリのシンタックス
# [[plugins]]
# repo = 'othree/javascript-libraries-syntax.vim'
# hook_add = '''
# function! EnableJavascript()
# 	" Setup used libraries
# 	let g:used_javascript_libs = 'jquery,underscore,react,flux,jasmine,d3'
# 	let b:javascript_lib_use_jquery = 1
# 	let b:javascript_lib_use_underscore = 0
# 	let b:javascript_lib_use_react = 1
# 	let b:javascript_lib_use_flux = 0
# 	let b:javascript_lib_use_jasmine = 0
# 	let b:javascript_lib_use_d3 = 1
# endfunction
# augroup EnableJavascript
# 	autocmd!
# 	autocmd FileType javascript,javascript.jsx call EnableJavascript()
# augroup END
# '''

# [[plugins]]
# repo = 'Shougo/defx.nvim'

# [[plugins]]
# repo = 'Shougo/deoplete.nvim'
# hook_add = 'let g:deoplete#enable_at_startup = 1'

# 検索・置換コマンドを賢くする
[[plugins]]
repo = 'tpope/vim-abolish'

# # True Color対応のカラースキーム
# [[plugins]]
# repo = 'jacoborus/tender.vim'
# hook_add = '''
# if (has("termguicolors"))
# 	set termguicolors
# endif
# syntax enable
# colorscheme tender
# '''

## レトロなカラースキーム
# 2021/01/23 ctrlpのC-k, C-lの遅延を起こすので廃止
#[[plugins]]
#repo = 'morhetz/gruvbox'
#hook_add = '''
#"if (has("termguicolors"))
#"	set termguicolors
#"endif
#syntax enable
#colorscheme gruvbox
#set background=light
#
#"let g:gruvbox_contrast_light = 'soft'
#'''

[[plugins]]
repo = 'sonph/onehalf'
hook_add = '''
syntax on
set t_Co=256
set cursorline
colorscheme onehalflight
" colorscheme onehalfdark
" let g:airline_theme='onehalfdark'
let g:lightline = { 'colorscheme': 'onehalfdark' }
'''

# Emmet記法で爆速開発
[[plugins]]
repo = 'mattn/emmet-vim'
hook_add = '''
let g:user_emmet_install_global = 0
autocmd FileType html,css EmmetInstall
'''

# HTMLタグを自動的に閉じる
[[plugins]]
repo = 'alvan/vim-closetag'
hook_add = '''
" These are the file extensions where this plugin is enabled.
let g:closetag_filenames = '*.html,*.xhtml,*.phtml'

" This will make the list of non-closing tags self-closing in the specified files.
let g:closetag_xhtml_filenames = '*.xhtml,*.jsx'

" These are the file types where this plugin is enabled.
let g:closetag_filetypes = 'html,xhtml,phtml'

" This will make the list of non-closing tags self-closing in the specified files.
let g:closetag_xhtml_filetypes = 'xhtml,jsx'

" This will make the list of non-closing tags case-sensitive (e.g. `<Link>` will be closed while `<link>` won't.)
let g:closetag_emptyTags_caseSensitive = 1

" dict
" Disables auto-close if not in a "valid" region (based on filetype)
"let g:closetag_regions = {
"    \ 'typescript.tsx': 'jsxRegion,tsxRegion',
"    \ 'javascript.jsx': 'jsxRegion',
"    \ }

" Add > at current position without closing the current tag, default is ''
"
"let g:closetag_close_shortcut = '<leader>>'
'''

# 超軽量ファイラー
# [[plugins]]
# repo = 'mattn/vim-molder'
# hook_add = '''
# let g:molder_show_hidden = 1
# '''

# mattn/vim-molderのアドオン
# [[plugins]]
# repo = 'mattn/vim-molder-operations'

# asynchronous tree viewer
[[plugins]]
repo = 'lambdalisue/fern.vim'
hook_add = '''
" let g:fern#loglevel = -1
" <C-e>でProject drawerを開き、現在のファイル名にフォーカスする。
nnoremap <silent><C-e> :<C-u>Fern . -drawer -reveal=%<CR>

function! FernInit() abort
  nmap <buffer><expr>
	  \ <Plug>(fern-my-open-expand-collapse)
	  \	fern#smart#leaf(
	  \	  "\<Plug>(fern-action-open:select)",
	  \	  "\<Plug>(fern-action-expand)",
	  \	  "\<Plug>(fern-action-collapse)",
	  \ )
  nmap <buffer> <CR> <Plug>(fern-my-open-expand-collapse)
  nmap <buffer> <2-LeftMouse> <Plug>(fern-my-open-expand-collapse)
  nmap <buffer> p <Plug>(fern-action-new-path)
  nmap <buffer> F <Plug>(fern-action-new-file)
  nmap <buffer> d <Plug>(fern-action-remove)
  nmap <buffer> m <Plug>(fern-action-move)
  nmap <buffer> M <Plug>(fern-action-rename)
  nmap <buffer> h <Plug>(fern-action-hidden:toggle)
  nmap <buffer> r <Plug>(fern-action-reload)
  nmap <buffer> b <Plug>(fern-action-open:split)
  nmap <buffer> v <Plug>(fern-action-open:vsplit)
  nmap <buffer> x <Plug>(fern-action-collapse)
endfunction

augroup FurnGroup
  autocmd!
  autocmd FileType fern call FernInit()
augroup END
'''

# A plugin for fern.vim to make the fern.vim as a default file explorer instead of Netrw.
[[plugins]]
repo = 'lambdalisue/fern-hijack.vim'
depends = [
	'lambdalisue/fern.vim'
]

# A simplified version of vim-devicons which does NOT provide any 3rd party integrations in itself. In otherwords, it is a fundemental plugin to handle Nerd Fonts from Vim.
[[plugins]]
repo = 'lambdalisue/nerdfont.vim'

# fern.vim plugin which add file type icons through lambdalisue/nerdfont.vim.
[[plugins]]
repo = 'lambdalisue/fern-renderer-nerdfont.vim'
depends = [
	'lambdalisue/fern.vim'
]
hook_add = '''
let g:fern#renderer = "nerdfont"
'''

# fern-git-status is a fern.vim plugin to add git status on node's badge asynchronously.
[[plugins]]
repo = 'lambdalisue/fern-git-status.vim'
depends = [
	'lambdalisue/fern.vim'
]

# カレントディレクトリのファイル一覧を表示
#[[plugins]]
#repo = 'scrooloose/nerdtree'
#hook_add = '''
#" <C-e>でツリーを開く
#" nnoremap <silent><C-e> :<C-u>NERDTreeToggle<CR>
#
#" ブックマークを初期表示
#let g:NERDTreeShowBookmarks=1
#
#" 隠しファイルを表示する
#let NERDTreeShowHidden = 1
#
#" Vimを起動したときに自動でNERDTreeを表示
#" autocmd vimenter * NERDTree
#
#" ファイル名が指定された状態でVimが起動された場合はNERDTreeを起動しない
#" autocmd StdinReadPre * let s:std_in=1
#" autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
#" autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif
#
#" 他のバッファをすべて閉じたときにNERDTreeが開いていたらNERDTreeも一緒に閉じる
#autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
#
#" ディレクトリ表示記号を変更する
#let g:NERDTreeDirArrows = 1
#let g:NERDTreeDirArrowExpandable  = '▶'
#let g:NERDTreeDirArrowCollapsible = '▼'
#
#'''

# タブページ使用時にNERDTreeを便利にする
#[[plugins]]
#repo = 'jistr/vim-nerdtree-tabs'
#hook_add = '''
#" NERDTreeToggleの代わりにNERDTreeTabsToggleを呼ぶようにする
#" nnoremap <silent><C-e> :<C-u><Plug>NERDTreeTabsToggle<CR>
#map <C-e> <Plug>NERDTreeTabsToggle<CR>
#let g:nerdtree_tabs_open_on_gui_startup = 0
#'''

## NERDTreeのシンタックスハイライト
#[[plugins]]
#repo = 'tiagofumo/vim-nerdtree-syntax-highlight'
#hook_add = '''
#" アイコンだけでなくファイル名もハイライトする
#let g:NERDTreeFileExtensionHighlightFullName = 1
#let g:NERDTreeExactMatchHighlightFullName = 1
#let g:NERDTreePatternMatchHighlightFullName = 1
#
#" フォルダをハイライトする
#let g:NERDTreeHighlightFolders = 1
#let g:NERDTreeHighlightFoldersFullName = 1
#
#" ファイルアイコン
#let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols = {}
#let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['html'] = ''
#let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['css']  = ''
#let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['md']   = ''
#let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['vim']  = ''
#let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols = {}
#let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols['.gitignore'] = ''
#let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols['.gitconfig'] = ''
#let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols['.vimrc']     = ''
#let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols['.gvimrc']    = ''
#let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols['_vimrc']     = ''
#let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols['_gvimrc']    = ''
#let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols = {}
#let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['.*vimrc.*'] = ''
#'''

# 複数行コメントアウト
[[plugins]]
repo = 'tomtom/tcomment_vim'

# surround関連の編集
[[plugins]]
repo =  'tpope/vim-surround'

# ヴィジュアルモードで選択した文字列を検索
[[plugins]]
repo = 'thinca/vim-visualstar'

# インデントガイド
[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
" Vim起動時に可視化を有効にする
let g:indent_guides_enable_on_vim_startup = 1
" 可視化領域のサイズを変更する
let g:indent_guides_guide_size = 1
" 無効にするファイルタイプ
let g:indent_guides_exclude_filetypes = ['help', 'nerdtree']
'''

# 複数カーソル
[[plugins]]
repo = 'mg979/vim-visual-multi'
# repo = 'terryma/vim-multiple-cursors' #Obsolete

# ステータスラインをいい感じにする
[[plugins]]
repo = 'itchyny/lightline.vim'
depends = [
	# 'jacoborus/tender.vim',
	# 'morhetz/gruvbox',
	'sonph/onehalf',
	'maximbaz/lightline-ale'
]
hook_add = '''
let g:lightline = {
	\	'colorscheme': 'jellybeans',
	\	'mode_map': {'c': 'NORMAL'},
	\	'active': {
	\		'left': [
	\			['mode', 'paste'],
	\			['fugitive', 'filename', 'ale'],
	\		],
	\		'right': [
	\			['linter_checking',	'linter_errors', 'linter_warnings', 'linter_ok' ],
	\			['lineinfo'],
	\			['percent'],
	\			['fileformat', 'fileencoding', 'filetype'],
	\		],
	\	},
	\	'component': {
	\		'lineinfo':	    '%3l/%L:%-2v',
	\	},
	\	'component_function': {
	\		'modified':	    'LightlineModified',
	\		'readonly':     'LightlineReadonly',
	\		'fugitive':     'LightlineFugitive',
	\		'filename':     'LightlineFilename',
	\		'fileformat':   'LightlineFileformat',
	\		'filetype':     'LightlineFiletype',
	\		'fileencoding': 'LightlineFileencoding',
	\		'mode':         'LightlineMode',
	\	},
    \	'separator': {
	\		'left': '', 'right': '',
	\	},
    \	'subseparator': {
	\		'left': '', 'right': '',
	\	},
	\ }

"	\		'left': '', 'right': '',
"	\		'left': '', 'right': '',
"	\		'left': '', 'right': '',
"	\		'left': '', 'right': '',
"	\		'left': '', 'right': '',
"	\		'left': '', 'right': '',

function! LightlineModified()
	return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! LightlineReadonly()
	return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? 'x' : ''
endfunction

function! LightlineFilename()
	return ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
		\ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
		\  &ft == 'unite' ? unite#get_status_string() :
		\  &ft == 'vimshell' ? vimshell#get_status_string() :
		\ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
		\ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
endfunction

function! LightlineFugitive()
	if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
		return fugitive#head()
	else
		return ''
	endif
endfunction

function! LightlineFileformat()
	return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! LightlineFiletype()
	return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
endfunction

function! LightlineFileencoding()
	return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
endfunction

function! LightlineMode()
	return winwidth(0) > 60 ? lightline#mode() : ''
endfunction
'''

# ALEによるメッセージをlightlineステータスラインに表示する
[[plugins]]
repo = 'maximbaz/lightline-ale'
depends = [
	'itchyny/lightline.vim'
	'w0rp/ale',
]
hook_add = '''
let g:lightline = {
	\	'component_expand' : {
	\		'linter_checking': 'lightline#ale#checking',
	\		'linter_errors':   'lightline#ale#errors',
	\		'linter_warnings': 'lightline#ale#warnings',
	\		'linter_ok':       'lightline#ale#ok',
	\	},
	\	'component_type' : {
	\		'linter_checking': 'left',
	\		'linter_errors':   'error',
	\		'linter_warnings': 'warning',
	\		'linter_ok':       'left',
	\	}
	\ }

" アイコンを変更
let g:lightline#ale#indicator_checking = ''
let g:lightline#ale#indicator_errors   = ''
let g:lightline#ale#indicator_warnings = ''
let g:lightline#ale#indicator_ok       = ''

" メッセージのフォーマットを変更する
let g:ale_echo_msg_format = '[%linter%] %s'
'''

# Vim起動時のスタートスクリーン表示
[[plugins]]
repo = 'mhinz/vim-startify'
hook_add = '''
let g:startify_bookmarks = [
	\ {'d': '~/GitHub/dotfiles/dein/toml/dein.toml'},
	\ {'p': '~/GitHub/WordPress/page-home.php'},
	\ ]

let g:startify_lists = [
	\ { 'type': 'files',     'header': ['   MRU']            },
	\ { 'type': 'dir',       'header': ['   MRU '. getcwd()] },
	\ { 'type': 'sessions',  'header': ['   Sessions']       },
	\ { 'type': 'bookmarks', 'header': ['   Bookmarks']      },
	\ { 'type': 'commands',  'header': ['   Commands']       },
	\ ]
" BufEnter時にcwdを変更しない。
let g:startify_change_to_dir = 0
'''
hook_post_source = '''
" 新規タブで起動する
function! MyStartify()
    :tabe
    :call startify#insane_in_the_membrane(0)
endfunction
command! -nargs=0 -bar Startify :call MyStartify()
'''

# カーソル移動をしていないときのみカーソル行を表示する
[[plugins]]
repo = 'delphinus/vim-auto-cursorline'
hook_add = '''
let g:auto_cursorline_wait_ms = 500
'''

# ステータスラインをかっこよく
# [[plugins]]
# repo = 'vim-airline/vim-airline'

# ソースコード中のカラーをプレビューする
# ※遅い
# [[plugins]]
# repo = 'ap/vim-css-color'

# ソースコード中のカラーをプレビューする
[[plugins]]
repo = 'gko/vim-coloresque'

# 行末の不要な空白文字を可視化
[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

# .tomlファイルのシンタックス
[[plugins]]
repo = 'cespare/vim-toml'

# Vimでfzfを使用する
# [[plugins]]
# repo = 'junegunn/fzf'
# hook_post_update = '''
# 	if has('win32')
# 		let cmd = '~/GitHub/fzf/install'
# 	endif
# 	let g:dein#plugin.build = cmd
# '''
# merged = '0'

# [[plugins]]
# repo = 'junegunn/fzf.vim'
# depends = 'junegunn/fzf'
# hook_add = '''
# command! -bang -nargs=* Rg
# 	\ call fzf#vim#grep(
# 	\   'rg --line-number --no-heading '.shellescape(<q-args>), 0,
# 	\   fzf#vim#with_preview({'options': '--exact --reverse'}, 'right:50%:wrap'))
#
# " キーバインド
# nnoremap <silent> ,f :Files<CR>
# nnoremap <silent> ,g :GFiles<CR>
# nnoremap <silent> ,G :GFiles?<CR>
# nnoremap <silent> ,b :Buffers<CR>
# nnoremap <silent> ,l :BLines<CR>
# nnoremap <silent> ,h :History<CR>
# nnoremap <silent> ,m :Mark<CR>
# '''

# ファイルをあいまい検索
[[plugins]]
repo = 'ctrlpvim/ctrlp.vim'
hook_add = '''
nnoremap [ctrlp] <Nop>
nmap <Space>p [ctrlp]
nnoremap [ctrlp]b :<C-u>CtrlPBuffer<CR>
nnoremap [ctrlp]l :<C-u>CtrlPLine<CR>
nnoremap [ctrlp]p :<C-u>CtrlPMixed<CR>
nnoremap [ctrlp]q :<C-u>CtrlPQuickFix<CR>

let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:10,results:50'
let g:ctrlp_prompt_mappings = {
	\ 'PrtBS()':              ['<bs>', '<c-h>'],
    \ 'PrtCurLeft()':         ['<left>', '<c-^>'],
	\ }
'''

# fFtT押下でジャンプ先をハイライトする
[[plugins]]
repo = 'unblevable/quick-scope'
hook_add = '''
let g:qs_lazy_highlight = 1
let g:qs_max_chars=60
augroup qs_colors
	autocmd!
	autocmd ColorScheme * highlight QuickScopePrimary guifg='#85ba5f' gui=underline ctermfg=155 cterm=underline
	autocmd ColorScheme * highlight QuickScopeSecondary guifg='#5fdddd' gui=underline ctermfg=81 cterm=underline
augroup END
'''

# 検索位置を画面に表示する
[[plugins]]
repo = 'osyo-manga/vim-anzu'
hook_add = '''
" mapping
nmap n <Plug>(anzu-n-with-echo)
nmap N <Plug>(anzu-N-with-echo)
nmap * <Plug>(anzu-star-with-echo)
nmap # <Plug>(anzu-sharp-with-echo)

" clear status
nmap <Esc><Esc> <Plug>(anzu-clear-search-status)

" statusline
" set statusline=%{anzu#search_status()}
'''

# カッコを自動的に閉じる
[[plugins]]
repo = 'cohama/lexima.vim'
hook_add = '''
call lexima#add_rule({'char': '<C-h>', 'at': '(\%#)', 'delete': 1})
call lexima#add_rule({'char': '<C-h>', 'at': '{\%#}', 'delete': 1})
call lexima#add_rule({'char': '<C-h>', 'at': '\[\%#\]', 'delete': 1})
call lexima#add_rule({'char': '<C-h>', 'at': '"""\%#"""', 'input': '<BS><BS><BS>', 'delete': 3})
call lexima#add_rule({'char': '<C-h>', 'at': "'\\%#'", 'delete': 1})
call lexima#add_rule({'char': '<C-h>', 'at': '"\%#"', 'delete': 1})
call lexima#add_rule({'char': '<C-h>', 'at': '`\%#`', 'delete': 1})
call lexima#add_rule({'char': '<C-h>', 'at': '```\%#```', 'input': '<BS><BS><BS>', 'delete': 3})
call lexima#add_rule({'char': '<C-h>', 'at': '( \%# )', 'delete': 1})
call lexima#add_rule({'char': '<C-h>', 'at': '{ \%# }', 'delete': 1})
call lexima#add_rule({'char': '<C-h>', 'at': '\[ \%# ]', 'delete': 1})
'''

# Auto change directory to project root directory of the file.
[[plugins]]
repo = 'mattn/vim-findroot'
hook_add = '''
let g:findroot_not_for_subdir = 0
'''

# Brings physics-based smooth scrolling to the Vim/Neovim world!
[[plugins]]
repo = 'yuttie/comfortable-motion.vim'
hook_add = '''
let g:comfortable_motion_friction = 5.0
let g:comfortable_motion_air_drag = 8.0
noremap <silent> <ScrollWheelDown> :call comfortable_motion#flick(40)<CR>
noremap <silent> <ScrollWheelUp>   :call comfortable_motion#flick(-40)<CR>
'''

# 行選択し差分を表示する
[[plugins]]
repo = 'AndrewRadev/linediff.vim'

# テキストオブジェクトを自作で定義する
[[plugins]]
repo = 'kana/vim-textobj-user'

# バッファ全体(ie, ae)
[[plugins]]
repo = 'kana/vim-textobj-entire'
depends = [
	'kana/vim-textobj-user'
]
# 現在行(il, al)
[[plugins]]
repo = 'kana/vim-textobj-line'
depends = [
	'kana/vim-textobj-user'
]
# カッコなどの囲み文字ブロック内(ib, ab)
[[plugins]]
repo = 'osyo-manga/vim-textobj-multiblock'
depends = [
	'kana/vim-textobj-user'
]
# 矩形(cIw, <C-v>iw)
[[plugins]]
repo = 'osyo-manga/vim-textobj-blockwise'
depends = [
	'kana/vim-textobj-user'
]

# [[plugins]]
# repo = 'roxma/vim-hug-neovim-rpc'
# on_if = '!has("nvim")'

# [[plugins]]
# repo = 'roxma/nvim-yarp'
# on_if = '!has("nvim")'

# APIドキュメントを参照する
[[plugins]]
repo = 'thinca/vim-ref'

# Vimの変数を整形して出力する
repo = 'thinca/vim-prettyprint'

# Vimチートシートを別ペインで表示する
[[plugins]]
repo = 'reireias/vim-cheatsheet'
hook_add = '''
let g:cheatsheet#cheat_file = '$HOME/.vim_cheatsheet.md'
'''

# モード変更時にIME状態を自動で切り替える
# [[plugins]]
# repo = 'pepo-le/win-ime-con.nvim'
# on_event = 'VimEnter'
# hook_source = '''
# g:win_ime_con_mode = 0
# '''

# ランダムな時刻をINSERTする
[[plugins]]
repo = 'kebiishi/random-date'

# Killer sheep
[[plugins]]
repo = 'vim/killersheep'

# ディレクトリごとに設定ファイルを用意する
[[plugins]]
repo =  'thinca/vim-localrc'
