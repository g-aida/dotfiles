[[plugins]]
repo = 'Shougo/dein.vim'

# アイコンを各種プラグインに適用する
[[plugins]]
repo = 'ryanoasis/vim-devicons'
hook_add = '''
" NERDTreeの設定
" フォルダ名の先頭にアイコンを付加する
let g:WebDevIconsUnicodeDecorateFolderNodes = 1
" フォルダの開閉によってアイコンを切り替える
let g:DevIconsEnableFoldersOpenClose = 1
'''

# [[plugins]]
# # スニペット
# repo = 'SirVer/ultisnips'

[[plugins]]
repo = 'prabirshrestha/async.vim'

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add='''
"" Diagnostics
"" 有効/無効の切り替え
"let g:lsp_diagnostics_enabled = 1
"" Sign表示有効/無効の切り替え
"let g:lsp_signs_enabled = 1
"let g:lsp_diagnostics_echo_cursor = 1
"let g:lsp_signs_error = {'text': ''}
"let g:lsp_signs_warning = {'text': ''}
"let g:lsp_signs_information= {'text': ''}
"let g:lsp_signs_hint= {'text': ''}
"
"" debug
"let g:lsp_log_verbose = 0
"" let g:lsp_log_file = expand('~/vimfiles/tmp/vim-lsp_log/vim-lsp.log')
"
"" Java -> eclipse.jdt.ls
"if executable('java') && filereadable(expand('~/lsp/eclipse.jdt.ls/plugins/org.eclipse.equinox.launcher_1.5.300.v20190213-1655.jar'))
"	augroup EclipseJdt
"		autocmd!
"		autocmd User lsp_setup call lsp#register_server({
"			\	'name': 'eclipse.jdt.ls',
"			\	'cmd': {server_info->[
"			\			'java',
"			\			'-Declipse.application=org.eclipse.jdt.ls.core.id1',
"			\			'-Dosgi.bundles.defaultStartLevel=4',
"			\			'-Declipse.product=org.eclipse.jdt.ls.core.product',
"			\			'-Dlog.level=ALL',
"			\			'-noverify',
"			\			'-Dfile.encoding=UTF-8',
"			\			'-Xmx1G',
"			\			'-jar',
"			\			expand('~/lsp/eclipse.jdt.ls/plugins/org.eclipse.equinox.launcher_1.5.300.v20190213-1655.jar'),
"			\			'-configuration',
"			\			expand('~/lsp/eclipse.jdt.ls/config_win'),
"			\			'-data',
"			\			getcwd()
"			\		]},
"			\	'whitelist': ['java'],
"			\ })
"	augroup END
"endif
"
"" javascript -> typescript-language-server
"if executable('typescript-language-server')
"	augroup TypescriptLanguageServer
"		autocmd!
"		autocmd User lsp_setup call lsp#register_server({
"			\	'name': 'typescript-language-server',
"			\	'cmd': {server_info->[
"			\			&shell,
"			\			&shellcmdflag,
"			\			'typescript-language-server --stdio'
"			\		]},
"			\	'root_uri': {server_info->lsp#utils#path_to_uri(
"			\		expand('~/AppData/Roaming/npm/node_modules/typescript-language-server/package.json')
""			\		lsp#utils#find_nearest_parent_file_directory(
""			\			lsp#utils#get_buffer_path(),
""			\			'package.json'
""			\		)
"			\		)},
"			\	'whitelist': ['javascript', 'javascript.jsx', 'typescript', 'typescript.tsx'],
"			\ })
"	augroup END
"endif
'''

[[plugins]]
repo = 'mattn/vim-lsp-settings'
hook_add = '''
let g:lsp_settings_servers_dir = '~/vimfiles/lsp-searvers'
'''

[[plugins]]
# 非同期補完
repo = 'prabirshrestha/asyncomplete.vim'
hook_add = '''
" let g:asyncomplete_log_file = expand('~/vimfiles/tmp/asyncomplete_log/asyncomplete.log')

" Force refresh completion
imap <c-space> <Plug>(asyncomplete_force_refresh)

" 補完時のプレビューウィンドウ表示
set completeopt+=preview

" 対象ファイルタイプを限定する
" let g:asyncomplete_enable_for_all = 0
" autocmd vimrc FileType autohotkey,autoit,cfg,git,go,groovy,java,javascript,python,snippet,toml,vim,vb,xsl call asyncomplete#enable_for_buffer()
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'
depends = [
	'prabirshrestha/asyncomplete.vim',
	'prabirshrestha/vim-lsp'
]

# [[plugins]]
# # 非同期コードチェック
# repo = 'w0rp/ale'
# hook_add = '''
# " linterを指定
# let g:ale_linters = {
# 	\	'java' : [],
# 	\	'javascript' : [],
# 	\ }
#
# " ワーニング・エラー間を素早くジャンプ
# nmap <silent> [e <Plug>(ale_previous_wrap)
# nmap <silent> ]e <Plug>(ale_next_wrap)
#
# " 左端のシンボルカラムを表示したままにする
# let g:ale_sign_column_always = 1
# " シンボルを変更する
# let g:ale_sign_error   = ''
# let g:ale_sign_warning = ''
# '''

# # javascriptのインデント・シンタックスハイライト
# [[plugins]]
# repo = 'pangloss/vim-javascript'
# hook_add = '''
# " Enables syntax highlighting for JSDocs.
# let g:javascript_plugin_jsdoc = 0
# " Enables some additional syntax highlighting for NGDocs. Requires JSDoc plugin to be enabled as well.
# let g:javascript_plugin_ngdoc = 0
# " Enables syntax highlighting for Flow.
# let g:javascript_plugin_flow = 0
# " JSファイルを自動的に折りたたむ
# " augroup javascript_folding
# "     au!
# "     au FileType javascript setlocal foldmethod=syntax
# " augroup END
# '''

# # JavaScript のシンタックス
# [[plugins]]
# repo = 'othree/yajs.vim'

# # JavaScript ライブラリのシンタックス
# [[plugins]]
# repo = 'othree/javascript-libraries-syntax.vim'
# hook_add = '''
# function! EnableJavascript()
# 	" Setup used libraries
# 	let g:used_javascript_libs = 'jquery,underscore,react,flux,jasmine,d3'
# 	let b:javascript_lib_use_jquery = 1
# 	let b:javascript_lib_use_underscore = 0
# 	let b:javascript_lib_use_react = 1
# 	let b:javascript_lib_use_flux = 0
# 	let b:javascript_lib_use_jasmine = 0
# 	let b:javascript_lib_use_d3 = 1
# endfunction
# augroup EnableJavascript
# 	autocmd!
# 	autocmd FileType javascript,javascript.jsx call EnableJavascript()
# augroup END
# '''

# [[plugins]]
# repo = 'Shougo/defx.nvim'

# [[plugins]]
# repo = 'Shougo/deoplete.nvim'
# hook_add = 'let g:deoplete#enable_at_startup = 1'

# 検索・置換コマンドを賢くする
[[plugins]]
repo = 'tpope/vim-abolish'

# # True Color対応のカラースキーム
# [[plugins]]
# repo = 'jacoborus/tender.vim'
# hook_add = '''
# if (has("termguicolors"))
# 	set termguicolors
# endif
# syntax enable
# colorscheme tender
# '''

# レトロなカラースキーム
[[plugins]]
repo = 'morhetz/gruvbox'
hook_add = '''
if (has("termguicolors"))
	set termguicolors
endif
syntax enable
colorscheme gruvbox
'''

# Emmet記法で爆速開発
[[plugins]]
repo = 'mattn/emmet-vim'
hook_add = '''
let g:user_emmet_install_global = 0
autocmd FileType html,css EmmetInstall
'''

# HTMLタグを自動的に閉じる
[[plugins]]
repo = 'alvan/vim-closetag'
hook_add = '''
" These are the file extensions where this plugin is enabled.
let g:closetag_filenames = '*.html,*.xhtml,*.phtml'

" This will make the list of non-closing tags self-closing in the specified files.
let g:closetag_xhtml_filenames = '*.xhtml,*.jsx'

" These are the file types where this plugin is enabled.
let g:closetag_filetypes = 'html,xhtml,phtml'

" This will make the list of non-closing tags self-closing in the specified files.
let g:closetag_xhtml_filetypes = 'xhtml,jsx'

" This will make the list of non-closing tags case-sensitive (e.g. `<Link>` will be closed while `<link>` won't.)
let g:closetag_emptyTags_caseSensitive = 1

" dict
" Disables auto-close if not in a "valid" region (based on filetype)
"let g:closetag_regions = {
"    \ 'typescript.tsx': 'jsxRegion,tsxRegion',
"    \ 'javascript.jsx': 'jsxRegion',
"    \ }

" Add > at current position without closing the current tag, default is ''
"
"let g:closetag_close_shortcut = '<leader>>'
'''

# カレントディレクトリのファイル一覧を表示
[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
" <C-e>でツリーを開く
nnoremap <silent><C-e> :<C-u>NERDTreeToggle<CR>

" ブックマークを初期表示
let g:NERDTreeShowBookmarks=1

" 隠しファイルを表示する
let NERDTreeShowHidden = 1

" Vimを起動したときに自動でNERDTreeを表示
" autocmd vimenter * NERDTree

" ファイル名が指定された状態でVimが起動された場合はNERDTreeを起動しない
" autocmd StdinReadPre * let s:std_in=1
" autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
" autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif

" 他のバッファをすべて閉じたときにNERDTreeが開いていたらNERDTreeも一緒に閉じる
autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" ディレクトリ表示記号を変更する
let g:NERDTreeDirArrows = 1
let g:NERDTreeDirArrowExpandable  = '▶'
let g:NERDTreeDirArrowCollapsible = '▼'

'''

# タブページ使用時にNERDTreeを便利にする
[[plugins]]
repo = 'jistr/vim-nerdtree-tabs'
hook_add = '''
" NERDTreeToggleの代わりにNERDTreeTabsToggleを呼ぶようにする
" nnoremap <silent><C-e> :<C-u><Plug>NERDTreeTabsToggle<CR>
map <C-e> <Plug>NERDTreeTabsToggle<CR>
let g:nerdtree_tabs_open_on_gui_startup = 0
'''

# NERDTreeのシンタックスハイライト
[[plugins]]
repo = 'tiagofumo/vim-nerdtree-syntax-highlight'
hook_add = '''
" アイコンだけでなくファイル名もハイライトする
let g:NERDTreeFileExtensionHighlightFullName = 1
let g:NERDTreeExactMatchHighlightFullName = 1
let g:NERDTreePatternMatchHighlightFullName = 1

" フォルダをハイライトする
let g:NERDTreeHighlightFolders = 1
let g:NERDTreeHighlightFoldersFullName = 1

" ファイルアイコン
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols = {}
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['html'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['css']  = ''
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['md']   = ''
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['vim']  = ''
let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols = {}
let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols['.gitignore'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols['.gitconfig'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols['.vimrc']     = ''
let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols['.gvimrc']    = ''
let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols['_vimrc']     = ''
let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols['_gvimrc']    = ''
let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols = {}
let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['.*vimrc.*'] = ''
'''

# 複数行コメントアウト
[[plugins]]
repo = 'tomtom/tcomment_vim'

# surround関連の編集
[[plugins]]
repo =  'tpope/vim-surround'

# ヴィジュアルモードで選択した文字列を検索
[[plugins]]
repo = 'thinca/vim-visualstar'

# インデントガイド
[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
" Vim起動時に可視化を有効にする
let g:indent_guides_enable_on_vim_startup = 1
" 可視化領域のサイズを変更する
let g:indent_guides_guide_size = 1
" 無効にするファイルタイプ
let g:indent_guides_exclude_filetypes = ['help', 'nerdtree']
'''

# 複数カーソル
[[plugins]]
repo = 'terryma/vim-multiple-cursors'

# ステータスラインをいい感じにする
[[plugins]]
repo = 'itchyny/lightline.vim'
depends = [
	# 'jacoborus/tender.vim',
	'morhetz/gruvbox',
	'maximbaz/lightline-ale'
]
hook_add = '''
let g:lightline = {
	\	'colorscheme': 'jellybeans',
	\	'mode_map': {'c': 'NORMAL'},
	\	'active': {
	\		'left': [
	\			['mode', 'paste'],
	\			['fugitive', 'filename', 'ale'],
	\		],
	\		'right': [
	\			['linter_checking',	'linter_errors', 'linter_warnings', 'linter_ok' ],
	\			['lineinfo'],
	\			['percent'],
	\			['fileformat', 'fileencoding', 'filetype'],
	\		],
	\	},
	\	'component': {
	\		'lineinfo':	    '%3l/%L:%-2v',
	\	},
	\	'component_function': {
	\		'modified':	    'LightlineModified',
	\		'readonly':     'LightlineReadonly',
	\		'fugitive':     'LightlineFugitive',
	\		'filename':     'LightlineFilename',
	\		'fileformat':   'LightlineFileformat',
	\		'filetype':     'LightlineFiletype',
	\		'fileencoding': 'LightlineFileencoding',
	\		'mode':         'LightlineMode',
	\	},
    \	'separator': {
	\		'left': '', 'right': '',
	\	},
    \	'subseparator': {
	\		'left': '', 'right': '',
	\	},
	\ }

"	\		'left': '', 'right': '',
"	\		'left': '', 'right': '',
"	\		'left': '', 'right': '',
"	\		'left': '', 'right': '',
"	\		'left': '', 'right': '',
"	\		'left': '', 'right': '',

function! LightlineModified()
	return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! LightlineReadonly()
	return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? 'x' : ''
endfunction

function! LightlineFilename()
	return ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
		\ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
		\  &ft == 'unite' ? unite#get_status_string() :
		\  &ft == 'vimshell' ? vimshell#get_status_string() :
		\ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
		\ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
endfunction

function! LightlineFugitive()
	if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
		return fugitive#head()
	else
		return ''
	endif
endfunction

function! LightlineFileformat()
	return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! LightlineFiletype()
	return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
endfunction

function! LightlineFileencoding()
	return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
endfunction

function! LightlineMode()
	return winwidth(0) > 60 ? lightline#mode() : ''
endfunction
'''

# ALEによるメッセージをlightlineステータスラインに表示する
[[plugins]]
repo = 'maximbaz/lightline-ale'
depends = [
	'itchyny/lightline.vim'
	'w0rp/ale',
]
hook_add = '''
let g:lightline = {
	\	'component_expand' : {
	\		'linter_checking': 'lightline#ale#checking',
	\		'linter_errors':   'lightline#ale#errors',
	\		'linter_warnings': 'lightline#ale#warnings',
	\		'linter_ok':       'lightline#ale#ok',
	\	},
	\	'component_type' : {
	\		'linter_checking': 'left',
	\		'linter_errors':   'error',
	\		'linter_warnings': 'warning',
	\		'linter_ok':       'left',
	\	}
	\ }

" アイコンを変更
let g:lightline#ale#indicator_checking = ''
let g:lightline#ale#indicator_errors   = ''
let g:lightline#ale#indicator_warnings = ''
let g:lightline#ale#indicator_ok       = ''

" メッセージのフォーマットを変更する
let g:ale_echo_msg_format = '[%linter%] %s'
'''

# Vim起動時のスタートスクリーン表示
[[plugins]]
repo = 'mhinz/vim-startify'
hook_add = '''
let g:startify_bookmarks = [
	\ {'d': '~/GitHub/dotfiles/dein/toml/dein.toml'},
	\ {'p': '~/GitHub/WordPress/page-home.php'},
	\ ]

let g:startify_lists = [
	\ { 'type': 'files',     'header': ['   MRU']            },
	\ { 'type': 'dir',       'header': ['   MRU '. getcwd()] },
	\ { 'type': 'sessions',  'header': ['   Sessions']       },
	\ { 'type': 'bookmarks', 'header': ['   Bookmarks']      },
	\ { 'type': 'commands',  'header': ['   Commands']       },
	\ ]

'''

# カーソル移動をしていないときのみカーソル行を表示する
[[plugins]]
repo = 'delphinus/vim-auto-cursorline'
hook_add = '''
let g:auto_cursorline_wait_ms = 500
'''

# ステータスラインをかっこよく
# [[plugins]]
# repo = 'vim-airline/vim-airline'

# ソースコード中のカラーをプレビューする
# ※遅い
# [[plugins]]
# repo = 'ap/vim-css-color'

# ソースコード中のカラーをプレビューする
[[plugins]]
repo = 'gko/vim-coloresque'

# 行末の不要な空白文字を可視化
[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

# .tomlファイルのシンタックス
[[plugins]]
repo = 'cespare/vim-toml'

# Vimでfzfを使用する
[[plugins]]
repo = 'junegunn/fzf'
hook_post_update = '''
	if has('win32')
		let cmd = '~/GitHub/fzf/install'
	endif
	let g:dein#plugin.build = cmd
'''
merged = '0'

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'junegunn/fzf'
hook_add = '''
command! -bang -nargs=* Rg
	\ call fzf#vim#grep(
	\   'rg --line-number --no-heading '.shellescape(<q-args>), 0,
	\   fzf#vim#with_preview({'options': '--exact --reverse'}, 'right:50%:wrap'))

" キーバインド
nnoremap <silent> ,f :Files<CR>
nnoremap <silent> ,g :GFiles<CR>
nnoremap <silent> ,G :GFiles?<CR>
nnoremap <silent> ,b :Buffers<CR>
nnoremap <silent> ,l :BLines<CR>
nnoremap <silent> ,h :History<CR>
nnoremap <silent> ,m :Mark<CR>
'''

# ファイルをあいまい検索
[[plugins]]
repo = 'ctrlpvim/ctrlp.vim'

# fFtT押下でジャンプ先をハイライトする
[[plugins]]
repo = 'unblevable/quick-scope'
hook_add = '''
let g:qs_max_chars=120
augroup qs_colors
	autocmd!
	autocmd ColorScheme * highlight QuickScopePrimary guifg='#afff5f' gui=underline ctermfg=155 cterm=underline
	autocmd ColorScheme * highlight QuickScopeSecondary guifg='#5fffff' gui=underline ctermfg=81 cterm=underline
augroup END
'''

# 検索位置を画面に表示する
[[plugins]]
repo = 'osyo-manga/vim-anzu'
hook_add = '''
" mapping
nmap n <Plug>(anzu-n-with-echo)
nmap N <Plug>(anzu-N-with-echo)
nmap * <Plug>(anzu-star-with-echo)
nmap # <Plug>(anzu-sharp-with-echo)

" clear status
nmap <Esc><Esc> <Plug>(anzu-clear-search-status)

" statusline
" set statusline=%{anzu#search_status()}
'''

# カッコを自動的に閉じる
[[plugins]]
repo = 'cohama/lexima.vim'

# 行選択し差分を表示する
[[plugins]]
repo = 'AndrewRadev/linediff.vim'

# テキストオブジェクトを自作で定義する
[[plugins]]
repo = 'kana/vim-textobj-user'

# バッファ全体(ie, ae)
[[plugins]]
repo = 'kana/vim-textobj-entire'
depends = [
	'kana/vim-textobj-user'
]
# 現在行(il, al)
[[plugins]]
repo = 'kana/vim-textobj-line'
depends = [
	'kana/vim-textobj-user'
]
# カッコなどの囲み文字ブロック内(ib, ab)
[[plugins]]
repo = 'osyo-manga/vim-textobj-multiblock'
depends = [
	'kana/vim-textobj-user'
]
# 矩形(cIw, <C-v>iw)
[[plugins]]
repo = 'osyo-manga/vim-textobj-blockwise'
depends = [
	'kana/vim-textobj-user'
]

# [[plugins]]
# repo = 'roxma/vim-hug-neovim-rpc'
# on_if = '!has("nvim")'

# [[plugins]]
# repo = 'roxma/nvim-yarp'
# on_if = '!has("nvim")'

# APIドキュメントを参照する
[[plugins]]
repo = 'thinca/vim-ref'

# Vimの変数を整形して出力する
repo = 'thinca/vim-prettyprint'

# Vimチートシートを別ペインで表示する
[[plugins]]
repo = 'reireias/vim-cheatsheet'
hook_add = '''
let g:cheatsheet#cheat_file = '$HOME/.vim_cheatsheet.md'
'''

# モード変更時にIME状態を自動で切り替える
# [[plugins]]
# repo = 'pepo-le/win-ime-con.nvim'
# on_event = 'VimEnter'
# hook_source = '''
# g:win_ime_con_mode = 0
# '''

# ランダムな時刻をINSERTする
[[plugins]]
repo = 'kebiishi/random-date'

# Killer sheep
[[plugins]]
repo = 'vim/killersheep'

# ディレクトリごとに設定ファイルを用意する
[[plugins]]
repo =  'thinca/vim-localrc'
